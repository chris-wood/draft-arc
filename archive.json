{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-08-07T00:10:47.372864+00:00",
  "repo": "chris-wood/draft-arc",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ietf123",
      "description": "",
      "color": "b829be"
    }
  ],
  "issues": [
    {
      "number": 7,
      "id": "I_kwDONyB6uM6rFQ2R",
      "title": "Use ZKProof spec for generation of Schnorr proofs",
      "url": "https://github.com/chris-wood/draft-arc/issues/7",
      "state": "OPEN",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, ARC defines and uses its own ZKP Schnorr compiler.\nTo reuse redundancy and reuse tooling across projects, it would be better to use the ZKProof spec defined here:\nhttps://mmaker.github.io/spfs/draft-orru-zkproof-sigma.html#name-ciphersuites\n\nHowever, adopting the ZKProof spec is blocking on it having a reference implementation and test vectors, which I filed an issue for here:\nhttps://github.com/mmaker/spfs/issues/1",
      "createdAt": "2025-02-22T00:36:06Z",
      "updatedAt": "2025-02-25T11:01:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "@mmaker, it looks like this draft is still unpublished, so we can't use it yet (beyond the reference implementation and test vector issue that Cathie mentioned above). What is your plan to get this published and worked on in the IETF?",
          "createdAt": "2025-02-24T18:11:33Z",
          "updatedAt": "2025-02-24T18:11:33Z"
        },
        {
          "author": "mmaker",
          "authorAssociation": "NONE",
          "body": "@chris-wood  I'm happy to have it worked with the IETF and integrate your compiler into one that can be compatible also with other specs.\nCan you give me ~1week-10days to publish an implementation?\n",
          "createdAt": "2025-02-24T20:16:07Z",
          "updatedAt": "2025-02-24T20:17:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Sorry, let me rephrase: do you intend to submit this to the [datatracker](https://datatracker.ietf.org)? As it stands now, the specification _does not exist_, because it's not published on the dataracker. In order for us to use it, we need it to be published in the datatracker. Additionally, are you opposed to co-authors on that specification? (If not, I recommend @cathieyun join to help out!) It will progress faster through the IETF that way.\n\nAnd yeah, there's no rush for the implementation. We're not blocked by any of this. We can move to a separate ZKP compiler if and when it becomes available. Until then, we will continue using the one specified in our draft.",
          "createdAt": "2025-02-24T20:19:08Z",
          "updatedAt": "2025-02-24T20:28:12Z"
        },
        {
          "author": "mmaker",
          "authorAssociation": "NONE",
          "body": "I am happy to submit this to the datatracker. \nI am also happy to have co-authors: in fact, you and @cathieyun are already contributors with push access to the repository.\n\nHowever, this is also the first ietf spec I write, so please consider that if I don't do something it's just that I was not aware of the policy! \n(For instance, I thought it'd be added to the data tracker **after** sharing it with the cfrg, and to do so i needed to make a good case with other working groups and write an implementation that suits them.)",
          "createdAt": "2025-02-25T05:39:38Z",
          "updatedAt": "2025-02-25T05:39:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "@mmaker understood, and no worries. You can (and should) submit to the datatracker frequently and often! This is just the place where IETF specifications live. IETF working groups and research groups require a draft to exist on the datatracker before it can be presented and considered for adoption. So, concretely, here's what I recommend you do:\n\n1. Update the co-authors to include whomever you like. (I think it's fine if you include me and Cathie -- our affiliation is included below).\n2. Submit to the datatracker.\n3. Share with CFRG and ask for time to present in Bangkok. \n\nThe reference implementation and test vectors can definitely come later, and that's OK. All that matters for now is that the draft be published so we can start \"the process.\" \n\nDoes that all make sense?\n\n------\n\nHere's the affiliation:\n\n```\nauthor:\n -\n    ins: C. Yun\n    name: Cathie Yun\n    organization: Apple, Inc.\n    email: cathieyun@gmail.com\n -\n    ins: C. A. Wood\n    name: Christopher A. Wood\n    org: Apple, Inc.\n    email: caw@heapingbits.net\n```",
          "createdAt": "2025-02-25T11:01:25Z",
          "updatedAt": "2025-02-25T11:01:25Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDONyB6uM6rFSQW",
      "title": "Define ARC protocol over a generic MAC protocol",
      "url": "https://github.com/chris-wood/draft-arc/issues/8",
      "state": "OPEN",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the ARC protocol is defined in relation to the CMZ14 MAC_GGM protocol. To more clearly illustrate which parts of the protocol are specific to ARC, and which can be generic over any MAC, we should define the ARC protocol over a generic MAC protocol, and then specify that MAC as CMZ14 MAC_GGM in a following section. \n\nThis will make it easier to later introduce different MAC backends, which have different tradeoffs (eg BBS MAC, muCMZ MAC, etc) without changing the protocol itself. \n\nThe initial change (defining the ARC protocol over a generic MAC, and defining CMZ14 MAC_GGM in a different section) will not change the functionality (test vectors will not be affected, for example) and is primarily editorial.",
      "createdAt": "2025-02-22T00:42:00Z",
      "updatedAt": "2025-02-22T00:42:00Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 10,
      "id": "I_kwDONyB6uM6rbGWx",
      "title": "Statistical anonymity is not (yet) achieved",
      "url": "https://github.com/chris-wood/draft-arc/issues/10",
      "state": "CLOSED",
      "author": "mmaker",
      "authorAssociation": "NONE",
      "assignees": [
        "cathieyun"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "The specification currently writes:\n\n> The resulting request is therefore perfetly hiding, and independent from other requests from the same client. More details about this unlinkability property can be found in {{KVAC}} and {{REVISITING_KVAC}}.\n\nThis is not true. The  public parameters in your spec `X_0` is defined as\n```\n  X0 = x0 * G.GeneratorG() + x0Blinding * G.GeneratorH()\n```\nwhich is only computationally binding. \nAn adversary breaking DL could in theory find `x0` and `x0'`, both committing to `X0`, and use them to sign different credentials. \n\nThis is the reason why in {{REVISITING_KVAC}} I **don't** set `X0` in this way. \nIn order to achieve stronger privacy you need to commit to X0 differently. \n\n(Nitpick: I am also not sure how you can get more than statistical anonymity, from thm 5.10 you also need soundness of the user proofs.)",
      "createdAt": "2025-02-24T19:53:28Z",
      "updatedAt": "2025-06-23T20:54:39Z",
      "closedAt": "2025-06-23T20:54:39Z",
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "To clarify, the claim in the spec is that the *request* is perfectly hiding, meaning that multiple requests can't be linked to each other. This has nothing to do with the definition of the server keys, as the request doesn't use the server keys at all - only the response does. I'll make this clearer by renaming the section to \"Credential request unlinkability\" instead of \"Credential issuance unlinkability\", which may have led to the misunderstanding.",
          "createdAt": "2025-06-20T20:34:16Z",
          "updatedAt": "2025-06-20T20:34:16Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDONyB6uM6rbV1E",
      "title": "Improve issuance of credentials, from linear to constant communication",
      "url": "https://github.com/chris-wood/draft-arc/issues/11",
      "state": "OPEN",
      "author": "mmaker",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "You can change the issuance protocol and have half communication on the server side and the client side.\nFor generic credentials, this is a constant vs linear improvement. \n\nReplace \n```\n  m1Enc = m1 * generatorG + r1 * generatorH\n  m2Enc = m2 * generatorG + r2 * generatorH\n```\n\nWith\n```\nmEnc = m1 * X1 + m2 * X2 + r * generatorG\n```\n\nas in {{REVISITING_KVAC}}",
      "createdAt": "2025-02-24T20:25:33Z",
      "updatedAt": "2025-02-24T20:26:10Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDONyB6uM6rb8z_",
      "title": "Reference implementation cleanup: seeded PRNGs for test vectors",
      "url": "https://github.com/chris-wood/draft-arc/issues/12",
      "state": "OPEN",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "Currently we get deterministic ZKP output by using an incrementing counter for blinding:\nhttps://github.com/chris-wood/draft-arc/blob/main/poc/zkp.sage#L62\n\nWe should move to a seeded PRNG instead, this is better practice. \n\n(Suggestion from Michele / @mmaker)",
      "createdAt": "2025-02-24T21:47:37Z",
      "updatedAt": "2025-06-13T20:07:56Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDONyB6uM6sL0dM",
      "title": "NotImplementedError",
      "url": "https://github.com/chris-wood/draft-arc/issues/14",
      "state": "OPEN",
      "author": "mmaker",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "Python has a specific exception for not-implemented errors, called \"[NotImplementedError](https://docs.python.org/3/library/exceptions.html#NotImplementedError)\". This should be preferred to raising a string object \"Not implemented\"",
      "createdAt": "2025-03-01T09:56:10Z",
      "updatedAt": "2025-06-13T20:07:56Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 16,
      "id": "I_kwDONyB6uM6sXSHS",
      "title": "MakePresentationState adds a nonce to the state",
      "url": "https://github.com/chris-wood/draft-arc/issues/16",
      "state": "CLOSED",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The code block at https://chris-wood.github.io/draft-arc/draft-yun-cfrg-arc.html#name-presentation-state that describes making the presentation state (`MakePresentationState`) also adds a single random nonce to the `presentationNonceSet`. It seems to me that it is not required, because `Present` will also pick a random nonce and add it to the set of used nonces.",
      "createdAt": "2025-03-03T16:55:06Z",
      "updatedAt": "2025-04-15T16:05:37Z",
      "closedAt": "2025-04-15T16:05:37Z",
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah that was a leftover of the previous approach of selecting nonces. Will update and remove that.",
          "createdAt": "2025-04-02T08:54:08Z",
          "updatedAt": "2025-04-02T08:54:08Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDONyB6uM6sXVn4",
      "title": "PrivacyPass: Section 8.1 improvements",
      "url": "https://github.com/chris-wood/draft-arc/issues/17",
      "state": "OPEN",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "1. [Section 8.1](https://chris-wood.github.io/draft-arc/draft-yun-privacypass-arc.html#name-token-creation) could define what `challenge_digest` is.\n2. Notice the difference in description between `token_type` and `presentation_nonce`.\n```\n\"token_type\" is a 2-octet integer, in network byte order, equal to 0xC7D3.\n\"presentation_nonce\" is a 32-bit encoding of the nonce output from ARC.\n```\nOne defines the byte order, the other does not specify which \"32-bit encoding\". I suggest to use \"4-octet integer, in network byte order\"",
      "createdAt": "2025-03-03T16:59:57Z",
      "updatedAt": "2025-06-13T20:07:56Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 18,
      "id": "I_kwDONyB6uM6sXYXW",
      "title": "PrivacyPass: Token Verification should mention checking the presentation tag.",
      "url": "https://github.com/chris-wood/draft-arc/issues/18",
      "state": "CLOSED",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[Section 8.2 Token Verification](https://chris-wood.github.io/draft-arc/draft-yun-privacypass-arc.html#section-8.2)\nShould mention that to avoid double spending, we need to check that the presentation tag has not been observed before.\nIt is mentioned in the ARC spec, but not in the privacy pass adoption.",
      "createdAt": "2025-03-03T17:04:55Z",
      "updatedAt": "2025-04-15T16:05:37Z",
      "closedAt": "2025-04-15T16:05:37Z",
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Added the same section to the privacy pass spec, thanks.",
          "createdAt": "2025-04-02T09:23:06Z",
          "updatedAt": "2025-04-02T09:23:06Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDONyB6uM6sXYrS",
      "title": "PrivacyPass: Section 9: the last link to Section 7.2 of [AUTHSCHEME] should instead be to: Section 6.2 of [ARCHITECTURE]",
      "url": "https://github.com/chris-wood/draft-arc/issues/19",
      "state": "OPEN",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "[Section 9](https://chris-wood.github.io/draft-arc/draft-yun-privacypass-arc.html#name-security-considerations): the last link to Section 7.2 of [AUTHSCHEME] should instead be to: Section 6.2 of [ARCHITECTURE]",
      "createdAt": "2025-03-03T17:05:30Z",
      "updatedAt": "2025-06-13T20:07:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "This should actually be linking to Section 7.2 of [ARC], as that is where the presentation nonce collisions are discussed. I will update the spec accordingly.",
          "createdAt": "2025-04-02T09:14:38Z",
          "updatedAt": "2025-04-02T09:14:38Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDONyB6uM6s1EU7",
      "title": "PrivacyPass: Section 8.2 `request_context` and `presentation_context` are wrong",
      "url": "https://github.com/chris-wood/draft-arc/issues/20",
      "state": "CLOSED",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "What happened is that #13 changed the `request_context` and `presentation_context` definitions, but it forgot to update them in Section 8.2: Token Verification.",
      "createdAt": "2025-03-06T07:30:14Z",
      "updatedAt": "2025-04-15T16:05:38Z",
      "closedAt": "2025-04-15T16:05:38Z",
      "comments": []
    },
    {
      "number": 21,
      "id": "I_kwDONyB6uM6tbECF",
      "title": "Confusion between instances and objects",
      "url": "https://github.com/chris-wood/draft-arc/issues/21",
      "state": "OPEN",
      "author": "mmaker",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "It seems there's some confusion about class attributes and instance attributes. For instance, in \n\nhttps://github.com/chris-wood/draft-arc/blob/main/poc/groups.sage#L220\n\nattributes like order, identity, etc can be accessed without instantiating the class (and it shouldn't be instantiated!)\nSame goes for other groups.\n\n",
      "createdAt": "2025-03-11T08:10:03Z",
      "updatedAt": "2025-06-13T20:07:57Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDONyB6uM6t59an",
      "title": "PrivacyPass: 7.2. Issuer-to-Client Request: title should say \"Response\"",
      "url": "https://github.com/chris-wood/draft-arc/issues/22",
      "state": "CLOSED",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "To better align with [existing docs](https://www.rfc-editor.org/rfc/rfc9578.html#name-issuer-to-client-response-2): the title should be \"Issuer-to-Client Response\"",
      "createdAt": "2025-03-13T15:53:20Z",
      "updatedAt": "2025-04-15T16:05:38Z",
      "closedAt": "2025-04-15T16:05:38Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDONyB6uM6uluWU",
      "title": "PrivacyPass: pointless renaming",
      "url": "https://github.com/chris-wood/draft-arc/issues/23",
      "state": "OPEN",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "There are instances of things in the ARC privacypass proposal that rename things slightly when compared to the rest of the privacy pass documents. This increases friction for implementations which want to support multiple token types.\n\nConcrete examples where the previous term is replaced with a new slightly different name, but without changing the meaning.\n`token_key_id` -> `issuer_key_id`\n`truncated_token_key_id` -> `truncated_issuer_key_id`\n`application/private-token-request` -> `application/private-credential-request`\n`application/private-token-response` -> `application/private-credential-response`\n\nI do not believe that the new names add any extra value, but they might cause confusion(subjective opinion) and they will increase friction for implementations (objective opinion).",
      "createdAt": "2025-03-18T16:28:31Z",
      "updatedAt": "2025-06-13T20:07:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "These are intentional, since ARC is about issuing _credentials_ and not _tokens_. I think we'll keep these as-is.",
          "createdAt": "2025-04-01T15:40:30Z",
          "updatedAt": "2025-04-01T15:40:30Z"
        },
        {
          "author": "karulont",
          "authorAssociation": "NONE",
          "body": "I see no benefit to renaming media types.\nIssuer who supports multiple token types, should parse the first 2 bytes of `TokenRequest` to figure out the token type.\n\nIn my opinion if you send a type called: `TokenRequest`, the media type should be `application-private-token-request`.\n\nAnyway, if you think that renaming the media type is appropriate, I have 2 followups:\n1. Why not rename \"TokenRequest\" / \"TokenResponse\"?\n2. You need to add the new media types to the [IANA MediaTypes registry](https://www.iana.org/assignments/media-types/media-types.xhtml).",
          "createdAt": "2025-04-01T21:42:40Z",
          "updatedAt": "2025-04-01T21:42:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Again, the thing being requested is _not_ a token, it's a credential. TokenRequest simply isn't precise.\n\nI'll reopen this to track the structure renaming and registry updates. Those should have been done.",
          "createdAt": "2025-04-02T16:47:09Z",
          "updatedAt": "2025-04-02T16:47:09Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDONyB6uM6uqiLL",
      "title": "Commonize handling process of presentationContext and nonce",
      "url": "https://github.com/chris-wood/draft-arc/issues/24",
      "state": "CLOSED",
      "author": "akakou",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I notice that the presentationContext and nonce serve similar roles at the protocol level; \nhowever, they are incorporated differently. \n\nIn my opinion, it might be simpler to \n- define `generatorT = G.HashToGroup(presentationContext || nonce, \"Tag\")`, or to \n- set `tag = (credential.m1 + nonce + HashToScalar(presentationContext))^(-1) * generatorT` instead. \n\nbut I have no confidence...Is it correct? ",
      "createdAt": "2025-03-19T04:03:23Z",
      "updatedAt": "2025-04-13T09:25:18Z",
      "closedAt": "2025-04-12T04:01:32Z",
      "comments": [
        {
          "author": "akakou",
          "authorAssociation": "NONE",
          "body": "I like the first approach because it can minimize the complexity of handling secret keys. Moreover, it may be better for compatibility with secure hardware[1, 2], similar to a rate limiter with secure hardware storage. Also, it might to be possible to eliminate the q-SDH assumption in the former case.\n\n[1] https://www.ndss-symposium.org/wp-content/uploads/2024-445-paper.pdf\n[2] https://github.com/akakou/scrappy/wiki/Scrappy-Extension-for-Counter-based-Rate%E2%80%90Limiting",
          "createdAt": "2025-03-19T04:04:47Z",
          "updatedAt": "2025-03-30T07:30:11Z"
        },
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for your questions. I responded in the privacy pass mailing list thread here:\nhttps://mailarchive.ietf.org/arch/msg/privacy-pass/O7tXyXtcc9XKLk0UxLfDblJl9n0/\n\nHopefully that answers your questions. The first approach makes it much harder to hide the nonce in the future (without changing the tag construction), and the second approach can work but does not have any obvious advantage over our current ARC tag construction (and requires one more element in the presentation proof). If you have follow-up questions, feel free to re-open this issue or make a new issue. Thanks for your interest!",
          "createdAt": "2025-04-12T04:01:32Z",
          "updatedAt": "2025-04-12T04:01:32Z"
        },
        {
          "author": "akakou",
          "authorAssociation": "NONE",
          "body": "@cathieyun \n\nThank you for your clear response. I fully understand your explanation regarding the first answer\u2014it makes perfect sense. \nRegarding the second point, I apologize for any confusion in my previous message. I would like to clarify the unclear parts here.\n\n---\n\n## Explanation of `generatorT`\n\n> This might be true, but I haven't looked into this construction because if you remove the nonce, then the rate limiting capabilities of ARC are also removed, so this was not of interest to us. I would question the utility of a construction `tag = credential.m1 * generatorT` because it would be the same value for all presentations from one credential, so the presentations from one credential would be trivially linkable.\n\nI realize I did not explain the definition of `generatorT` in my earlier question. \nIn fact, this question is a continuation of [my previous discussion](https://mailarchive.ietf.org/arch/msg/privacy-pass/kxs6bErx252ENFD9YRnmzGCFhGE/). Please assume that `generatorT` is defined as:\n> generatorT = G.HashToGroup(presentationContext || nonce, \"Tag\")\n\nTo be more precise, the procedure I have in mind is:\n```\n1. generatorT = G.HashToGroup(presentationContext || nonce, \"Tag\") \n2. tag = credential.m1 * generatorT\n```\n\nIn this process, the nonce is used to compute the tag, which enables rate-limiting functionality.\n\n## Compatibility\n\n> I'm not sure what compatibility this refers to. To my understanding, ARC is compatible with the same extensions that BBS would be compatible with. For example, the per-verifier-linkability BBS spec (https://datatracker.ietf.org/doc/draft-irtf-cfrg-bbs-per-verifier-linkability/) could in theory use the rate limiting tag extension from ARC, and the other way around is true as well. \n\nI am under the assumption that you are interseted in compatibility for existing secure hardware (such as Trusted Platform Modules, TPMs), referring to the following [lines](https://chris-wood.github.io/draft-arc/draft-yun-cfrg-arc.html#name-alternatives-considered):\n> The BBS anonymous credential scheme, as detailed in [BBS] and its variants, is efficient and publicly verifiable, but requires pairings for verification. This is problematic for adoption because pairings are not supported as widely in software and **hardware** as non-pairing elliptic curves.\n\nMy concern is that most existing hardware may not support a calculation like `(credential.m1 + nonce)^(-1) * generatorT` because many devices do not offer functionality for such complex cryptographic operations handling  the secret key. \nOn the other hand, some hardware might support simpler multiplications, such as `credential.m1 * generatorT` which might make the procedure described above feasible. \n(I\u2019m not an expert on secure hardware, but I know TPMs can at least perform such multiplication.)",
          "createdAt": "2025-04-12T07:03:57Z",
          "updatedAt": "2025-04-13T09:25:17Z"
        },
        {
          "author": "akakou",
          "authorAssociation": "NONE",
          "body": "As you mentioned before, this scheme involves a clear trade-off as hardware compatibility & removing q-SDH assumption v.s. a simpler range-proof mechanism. To be honest, I'm not sure whether this discussion should be included in the draft. However, if you or the community are interested in it, it is possibility to be beneficial to include it as an extension point.",
          "createdAt": "2025-04-12T07:06:13Z",
          "updatedAt": "2025-04-12T08:45:25Z"
        },
        {
          "author": "akakou",
          "authorAssociation": "NONE",
          "body": "I would like to ask if this makes sense.\n\n",
          "createdAt": "2025-04-12T07:17:37Z",
          "updatedAt": "2025-04-12T07:17:37Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDONyB6uM6vPNi5",
      "title": "PrivacyPass: using TokenChallenge fields might be confusing",
      "url": "https://github.com/chris-wood/draft-arc/issues/25",
      "state": "OPEN",
      "author": "karulont",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "To construct a request context one has to do:\n```\nrequest_context = concat(tokenChallenge.issuer_name,\n  tokenChallenge.origin_info,\n  tokenChallenge.credential_context,\n  issuer_key_id)\n```\n\nThen when one looks at:\n```\nstruct {\n    uint16_t token_type = 0xC7D3; /* Type ARC(P-384) */\n    opaque issuer_name<1..2^16-1>;\n    opaque redemption_context<0..32>;\n    opaque origin_info<0..2^16-1>;\n    opaque credential_context<0..32>;\n} TokenChallenge;\n```\n\nSo let's give a simple example:\nIssuer name is \"issuer.example.net\" & other fields are left empty.\n\nSo now should the `request_context` be\n```\n69 73 73 75 65 72 2e 65 78 61 6d 70 6c 65 2e 6e 65 74 <token_key_id>\n```\nOr should the request context contain all the length prefixes?\n```\n00 12 69 73 73 75 65 72 2e 65 78 61 6d 70 6c 65 2e 6e 65 74 00 00 00 <token_key_id>\n```\nNote we begin with 2 bytes for issuer name length, and end with 3 bytes of zeros, 2 for origin_info length and 1 for credential_context length.\n\nI assume the right interpretation is the second one where each field in the token challenge is prefixed by a length.\nBut when writing an implementation it is easy to make a mistake and forgot to include the length prefix. The spec should clarify it.",
      "createdAt": "2025-03-22T04:07:58Z",
      "updatedAt": "2025-06-13T20:07:58Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDONyB6uM6yDBLF",
      "title": "Privacy pass spec: client should hold onto tokenChallenge",
      "url": "https://github.com/chris-wood/draft-arc/issues/28",
      "state": "CLOSED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The client needs to hold onto their latest tokenChallenge, so that they have something to compare to when they get a new tokenChallenge - to see if the credential_context, origin_info, redemption_context, or issuer_name changed.\n\nFor example, if any of those fields except redemption_context change, they will need to fetch a new credential.\nIf the redemption_context changes, they will need to use the new redemption context for making presentations (and will have a new rate limit, which may be relevant if they ran out of their rate limit for the previous redemption context).",
      "createdAt": "2025-04-10T23:07:31Z",
      "updatedAt": "2025-04-15T16:05:38Z",
      "closedAt": "2025-04-15T16:05:38Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "I_kwDONyB6uM6ypQJo",
      "title": "Privacy pass: Verifier needs to parse out presentation tag for rate limiting",
      "url": "https://github.com/chris-wood/draft-arc/issues/29",
      "state": "OPEN",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "The verifier needs to store `presentation.tag` for rate limiting, so it needs to be able to parse that out from the `presentation` opaque blob. There currently isn't an API for the verifier to explicitly access the tag.",
      "createdAt": "2025-04-15T17:40:50Z",
      "updatedAt": "2025-06-13T20:07:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Alternatively, can update `VerifyPresentation` to output not only a bool, but also the tag. I like this, it's cleaner / reduces API functions, and forces the verifier to verify the presentation before getting the tag (no invalid tag storage!)",
          "createdAt": "2025-04-15T17:41:43Z",
          "updatedAt": "2025-04-15T17:41:43Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDONyB6uM60DAn4",
      "title": "ARC CFRG spec should include P256 test vectors",
      "url": "https://github.com/chris-wood/draft-arc/issues/30",
      "state": "CLOSED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cathieyun"
      ],
      "labels": [
        "ietf123"
      ],
      "body": "Since the CFRG spec says P256 and P384 are both supported, both ciphersuites should have test vectors. Currently there are only test vectors for P384.",
      "createdAt": "2025-04-25T17:59:54Z",
      "updatedAt": "2025-06-23T18:38:44Z",
      "closedAt": "2025-06-23T18:38:44Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDONyB6uM6JkhuC",
      "title": "Cleanup pass over the spec draft",
      "url": "https://github.com/chris-wood/draft-arc/pull/1",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Documentation / spec updates:\r\n- Removed Hash from ciphersuite dependency\r\n- Added explanation of why we are using KVAC instead of BBS\r\n- Clarified that the issuance protocol uses Pedersen commitments, for perfect privacy\r\n- Corrected the incorrect presentation proof scalar descriptions\r\n\r\nBehavioral changes:\r\n- Changed the presentationState definition to generate the nonce only when needed (instead of proactively generating / holding onto a presentationNonce). Updated the proof of concept accordingly.\r\n- Changed the proof of concept presentationState to have nonces start at 0 (instead of 1)\r\n-  Tightened the presentation limit bounds to 0 <= nonce < rateLimit (was previously allowing for nonce = rateLimit)\r\n\r\nFixes:\r\n- Added `x2` to the ServerKey test vectors (previously had a typo, repeated `x1` twice).\r\n\r\nSome things I have questions about:\r\n- Why aren't the presentation proof statements (5.4) rendering correctly? I don't see anything that should result in a formatting error, but the markdown seems unhappy with the Tag definition.",
      "createdAt": "2025-01-31T00:51:57Z",
      "updatedAt": "2025-01-31T13:15:02Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "9cfc01da472c850860006c4a0b0570a477dca2e2",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/cleanup",
      "headRefOid": "b67e765525d3a80637e67095d5019049eb950a5f",
      "closedAt": "2025-01-31T13:15:02Z",
      "mergedAt": "2025-01-31T13:15:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0f1198a859c747541f23185b1707f66433a315b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6aLi0m",
          "commit": {
            "abbreviatedOid": "34e4d55"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-31T13:12:44Z",
          "updatedAt": "2025-01-31T13:12:44Z",
          "comments": [
            {
              "originalPosition": 416,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-01-31T13:12:44Z",
              "updatedAt": "2025-01-31T13:12:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6aLjq6",
          "commit": {
            "abbreviatedOid": "68d20a7"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-31T13:13:23Z",
          "updatedAt": "2025-01-31T13:14:08Z",
          "comments": [
            {
              "originalPosition": 419,
              "body": "```suggestion\r\nThe BBS anonymous credential scheme, as detailed in {{BBS}} and its variants, is efficient and publicly verifiable, but requires pairings for verification. This is problematic for adoption because pairings are not supported as widely in software and hardware as non-pairing elliptic curves.\r\n```",
              "createdAt": "2025-01-31T13:13:24Z",
              "updatedAt": "2025-01-31T13:14:08Z"
            },
            {
              "originalPosition": 421,
              "body": "```suggestion\r\nIt is possible to construct a keyed-verification variant of BBS which doesn't use pairings, as discussed in {{BBDT17}} and {{REVISITING_KVAC}}. However these keyed-verification BBS variants require more analysis, proofs of security properties, and review to be considered mature enough for safe deployment.\r\n```",
              "createdAt": "2025-01-31T13:14:01Z",
              "updatedAt": "2025-01-31T13:14:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDONyB6uM6JrAx9",
      "title": "Add Privacy Pass integration draft",
      "url": "https://github.com/chris-wood/draft-arc/pull/2",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Questions:\r\n1. Should requestContext be the entire challenge, or just issuer name? I think just the issuer name, letting the server use the rest of the TokenChallenge as the presentationContext.\r\n2. Do we need to include the rate limit as a challenge extension? (I think so)\r\n3. How should we encode nonce on the wire? I think 32 bits is probably fine? This does impose an upper bound on the actual rate limit, of course.\r\n4. What do we need in security considerations for the Privacy Pass draft?",
      "createdAt": "2025-01-31T17:53:46Z",
      "updatedAt": "2025-01-31T21:06:17Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "b3bb6710d338ed8fd0825f6909880e445832c9c5",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "caw/pp",
      "headRefOid": "694d54e8c735ad5e75953d4c15965a773a4089aa",
      "closedAt": "2025-01-31T21:06:17Z",
      "mergedAt": "2025-01-31T21:06:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0e51dff5a7e76eaddc27bf66c7bd974148a837ef"
      },
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "1. I think that the requestContext should be as minimal as possible. So if we can have it just be the issuer name, that would be ideal (allows for more flexibility upon presentation).\r\n2. By \"challenge extension\" you mean another field in the TokenChallenge sent from the Client Origin? I had been thinking that the rate limit gets sent with the server public keys - so that can be in the TokenChallenge itself, or alongside it.\r\n   - Though looking through the origin-provided inputs, I see that the Privacy Pass spec has the origin sending the Public Key ID (issuer_key_id), instead of the public key itself. Since the client needs the full public key for the FinalizeCredential call, when does it receive the full public key? Or is this step considered to be out-of-band and not defined by the spec?\r\n3. I think 32 bits is fine. ",
          "createdAt": "2025-01-31T19:03:52Z",
          "updatedAt": "2025-01-31T19:03:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDONyB6uM6J6Zt9",
      "title": "Add privacy pass security considerations",
      "url": "https://github.com/chris-wood/draft-arc/pull/3",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added some security considerations to the privacy pass section, working off of other specs:\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-privacypass-architecture-16#section-6\r\nhttps://datatracker.ietf.org/doc/draft-ietf-privacypass-public-metadata-issuance/\r\nhttps://datatracker.ietf.org/doc/rfc9497/\r\n\r\nSome of this repeats the security considerations in the ARC CFRG spec (eg Client Issuance Unlinkability), I'm not sure if it's okay to repeat across both specs, or where they would belong best.",
      "createdAt": "2025-02-03T22:24:38Z",
      "updatedAt": "2025-02-04T01:13:12Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "a85a40173e014733ffe96e625c73399b43d19e13",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/pp-security",
      "headRefOid": "91c301950da1cc6dbb71a062425d256af4e30f2c",
      "closedAt": "2025-02-04T01:13:12Z",
      "mergedAt": "2025-02-04T01:13:12Z",
      "mergedBy": "cathieyun",
      "mergeCommit": {
        "oid": "2f07972788431435b16750677c88ca2f14e33cf1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6adea4",
          "commit": {
            "abbreviatedOid": "91c3019"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T00:15:17Z",
          "updatedAt": "2025-02-04T00:15:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDONyB6uM6KB0It",
      "title": "Collapse security considerations",
      "url": "https://github.com/chris-wood/draft-arc/pull/4",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "We defined a lot of these things in the architecture document, so I just used that language. Also, I fixed two things: (1) we don't send \"presentations,\" we send \"tokens\", and (2) the presentation context is the token challenge (and some other stuff); it's not some agreed-upon value between client and origin/issuer.",
      "createdAt": "2025-02-04T17:09:09Z",
      "updatedAt": "2025-02-04T20:17:31Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "2f07972788431435b16750677c88ca2f14e33cf1",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "caw/pp",
      "headRefOid": "6643014bb397ef96bd592ab7db2df337d4982983",
      "closedAt": "2025-02-04T20:17:31Z",
      "mergedAt": "2025-02-04T20:17:31Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f9f8ca5daa5442fc9b9376d44c1a1e46e8298531"
      },
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM! Thanks for cleaning up the wording, I wasn't sure about some of the terminology.",
          "createdAt": "2025-02-04T20:13:25Z",
          "updatedAt": "2025-02-04T20:14:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6amn2h",
          "commit": {
            "abbreviatedOid": "6643014"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T19:14:01Z",
          "updatedAt": "2025-02-04T19:14:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDONyB6uM6KGYl5",
      "title": "Reference implementation / test vector updates",
      "url": "https://github.com/chris-wood/draft-arc/pull/5",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Small changes and cleanups I came across while working on interoperability for the test vectors - mostly domain separator updates. I also removed some unnecessary fields from the Presentation (generatorT, U_prime) and added presentation_context. \r\n\r\nIMO the test vectors should have presentation_context, for presentation creation. I see that generatorT is included currently, which can be a proxy for presentation_context, but it seems better to use presentation_context directly (it also is a bit weird to make the ARC implementation take in a generatorT from a test vector, during presentation creation), so I removed it.",
      "createdAt": "2025-02-05T07:52:27Z",
      "updatedAt": "2025-02-07T21:26:39Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "f9f8ca5daa5442fc9b9376d44c1a1e46e8298531",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/testvectors",
      "headRefOid": "497187e26cf19295f769c9c3c68fd83c640a90d5",
      "closedAt": "2025-02-05T23:03:30Z",
      "mergedAt": "2025-02-05T23:03:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f94fdf1fac0bfd6b5a92c530c915adebb72add49"
      },
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I'm happy to keep the labels in line with the spec (so as not to change the spec).\r\n\r\nBut even then, we'll need a few tweaks here and there in the poc, like capitalizing \"tag\" in `generator_T = hash_to_group(self.presentation_context, to_bytes(\"tag\"))` to get them in sync.",
          "createdAt": "2025-02-05T16:49:39Z",
          "updatedAt": "2025-02-05T16:57:33Z"
        },
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "The reference implementation is now in line with the spec, from what I can tell. I didn't change the spec itself.\r\nAnd I updated the presentation context encoding to hex. \r\nPTAL :)",
          "createdAt": "2025-02-05T18:00:05Z",
          "updatedAt": "2025-02-05T18:00:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6aukrC",
          "commit": {
            "abbreviatedOid": "e1b90d1"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "The label changes don't match the spec. Can we please keep them as-is?",
          "createdAt": "2025-02-05T14:11:08Z",
          "updatedAt": "2025-02-05T14:12:03Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This should be in hex like the other test vectors.",
              "createdAt": "2025-02-05T14:11:08Z",
              "updatedAt": "2025-02-05T14:12:03Z"
            },
            {
              "originalPosition": 5,
              "body": "This doesn't match the spec:\r\n\r\n```\r\n  generatorT = G.HashToGroup(presentationContext, \"Tag\")\r\n```",
              "createdAt": "2025-02-05T14:11:40Z",
              "updatedAt": "2025-02-05T14:12:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6azdXT",
          "commit": {
            "abbreviatedOid": "497187e"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-05T23:03:25Z",
          "updatedAt": "2025-02-05T23:03:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDONyB6uM6KeBnn",
      "title": "Cleanup tasks",
      "url": "https://github.com/chris-wood/draft-arc/pull/6",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Cleanup / documentation tasks:\r\n- Some proof documentation was incorrect - specifically, the comments for statements 5a and 5b in the response proof were in the wrong order. \r\n- Added request_context to the test vectors, so we can test that request_context gets hashed correctly to become m2. \r\n\r\nPotential additional tasks: \r\n- Currently, the ProofParticipant initializer ignores the input label, instead setting it to an empty string. We should actually use the label, to differentiate different proofs. However, I didn't make that change in this PR because it changes all the proof test vectors, which would be quite disruptive. Maybe this fix can get rolled into the next change the significantly alters the test vectors.\r\n- Add more test vectors, including negative cases.",
      "createdAt": "2025-02-07T21:09:57Z",
      "updatedAt": "2025-02-12T16:38:16Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "f94fdf1fac0bfd6b5a92c530c915adebb72add49",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/nit",
      "headRefOid": "9f1abc04db5602cb197b180ee64944f3f569cf10",
      "closedAt": "2025-02-12T16:19:06Z",
      "mergedAt": "2025-02-12T16:19:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7c4fa7e7b36d94ba140f6ef36a3b71cd4f9529d1"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "@cathieyun this looks good, but I think we should make the ProofParticipant label change here. ",
          "createdAt": "2025-02-11T21:34:51Z",
          "updatedAt": "2025-02-11T21:34:51Z"
        },
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Done - I fixed the ProofParticipant label at initialization, and updated the test vectors accordingly. I also renamed the \"PresentationProof\" label to \"CredentialPresentation\" to have it line up with the \"CredentialRequest\" and \"CredentialResponse\" labels (that was bothering me :P).\r\nPTAL!",
          "createdAt": "2025-02-11T23:43:05Z",
          "updatedAt": "2025-02-11T23:44:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6bt85P",
          "commit": {
            "abbreviatedOid": "9f1abc0"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Woot!",
          "createdAt": "2025-02-12T16:19:00Z",
          "updatedAt": "2025-02-12T16:19:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDONyB6uM6MM1HU",
      "title": "Fixing nits",
      "url": "https://github.com/chris-wood/draft-arc/pull/9",
      "state": "MERGED",
      "author": "thibmeu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Small editorial nits",
      "createdAt": "2025-02-23T15:41:17Z",
      "updatedAt": "2025-02-25T19:54:53Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "7c4fa7e7b36d94ba140f6ef36a3b71cd4f9529d1",
      "headRepository": "thibmeu/draft-arc",
      "headRefName": "main",
      "headRefOid": "3dde9c120cd584c2ad2ff38a4f8a0445238e8911",
      "closedAt": "2025-02-25T19:54:53Z",
      "mergedAt": "2025-02-25T19:54:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9779d28674e161a1cea3962be58bb6796ebbb50e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6dPLoU",
          "commit": {
            "abbreviatedOid": "49371a3"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T18:03:07Z",
          "updatedAt": "2025-02-24T18:03:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  ARC: I-D.draft-yun-cfrg-arc\r\n```",
              "createdAt": "2025-02-24T18:03:07Z",
              "updatedAt": "2025-02-24T18:03:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6dPOIq",
          "commit": {
            "abbreviatedOid": "3dde9c1"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2025-02-24T18:04:05Z",
          "updatedAt": "2025-02-24T18:04:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONyB6uM6dPPgy",
          "commit": {
            "abbreviatedOid": "49371a3"
          },
          "author": null,
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T18:04:38Z",
          "updatedAt": "2025-02-24T18:04:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I did not know that was supported. That's nice",
              "createdAt": "2025-02-24T18:04:38Z",
              "updatedAt": "2025-02-24T18:04:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDONyB6uM6MiM6G",
      "title": "Add new TokenChallenge to separate credential and token construction",
      "url": "https://github.com/chris-wood/draft-arc/pull/13",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "cc @thibmeu, @tfpauly ",
      "createdAt": "2025-02-25T21:20:20Z",
      "updatedAt": "2025-03-03T17:45:12Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "9779d28674e161a1cea3962be58bb6796ebbb50e",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "caw/new-challenge",
      "headRefOid": "8284c0fdad2def4d1153f7ad1dc6fe713779c733",
      "closedAt": "2025-03-03T17:45:12Z",
      "mergedAt": "2025-03-03T17:45:12Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "08c54fd64f198e85d8a90827a45944cb52e5fec3"
      },
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM, thanks for adding this - this will help with credential expiry enforcement!",
          "createdAt": "2025-02-25T21:26:47Z",
          "updatedAt": "2025-02-25T21:26:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6djQIf",
          "commit": {
            "abbreviatedOid": "6059e57"
          },
          "author": "thibmeu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-26T06:41:00Z",
          "updatedAt": "2025-02-26T06:48:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This matches the ([yet-unwritten](https://datatracker.ietf.org/doc/html/draft-hendrickson-pp-attesterissuer-00#name-attester-to-issuer-request)) convention of putting token_type as the first byte.",
              "createdAt": "2025-02-26T06:41:00Z",
              "updatedAt": "2025-02-26T06:48:27Z"
            },
            {
              "originalPosition": 18,
              "body": "It would be great to reorder to have a structure that extends the Token Challenge Structure defined in [Section 2.1.1 of RFC9577](https://datatracker.ietf.org/doc/html/rfc9577#name-token-challenge-structure)\r\n```suggestion\r\n    opaque issuer_name<1..2^16-1>;\r\n    opaque redemption_context<0..32>;\r\n    opaque origin_info<0..2^16-1>;\r\n    opaque credential_context<0..32>;\r\n} TokenChallenge;\r\n```",
              "createdAt": "2025-02-26T06:44:32Z",
              "updatedAt": "2025-02-26T06:48:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6drAQu",
          "commit": {
            "abbreviatedOid": "6059e57"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-26T17:33:26Z",
          "updatedAt": "2025-02-26T17:33:27Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I thought about extending it, but opted not to since this is new parsing code based on the token type anyway. What do you see as the value in extending it?",
              "createdAt": "2025-02-26T17:33:26Z",
              "updatedAt": "2025-02-26T17:33:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6dx--a",
          "commit": {
            "abbreviatedOid": "6059e57"
          },
          "author": "thibmeu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T09:18:51Z",
          "updatedAt": "2025-02-27T09:18:51Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Mostly to match what exists. I agree this would be parsed anyway, but given this is the TokenChallenge it takes inspiration from at the moment could have the same order, I feel it makes sense to do it.",
              "createdAt": "2025-02-27T09:18:51Z",
              "updatedAt": "2025-02-27T09:18:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6d15Fp",
          "commit": {
            "abbreviatedOid": "6059e57"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T15:17:01Z",
          "updatedAt": "2025-02-27T15:17:01Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I don't feel strongly, so I'm happy to take this.",
              "createdAt": "2025-02-27T15:17:01Z",
              "updatedAt": "2025-02-27T15:17:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6d16NK",
          "commit": {
            "abbreviatedOid": "8284c0f"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T15:18:22Z",
          "updatedAt": "2025-02-27T15:18:22Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Isn't this specified [in the auth-scheme draft](https://ietf-wg-privacypass.github.io/base-drafts/draft-ietf-privacypass-auth-scheme.html#name-token-challenge-structure)?\r\n\r\n```\r\nAll token challenges MUST begin with a 2-octet integer that defines the token type, in network byte order. This type indicates the issuance protocol used to generate the token and determines the structure and semantics of the rest of the structure. Values are registered in an IANA registry, [Section 6.2](https://ietf-wg-privacypass.github.io/base-drafts/draft-ietf-privacypass-auth-scheme.html#token-types). Client MUST ignore challenges with token types they do not support.[\u00b6](https://ietf-wg-privacypass.github.io/base-drafts/draft-ietf-privacypass-auth-scheme.html#section-2.1.1-2)\r\n```",
              "createdAt": "2025-02-27T15:18:22Z",
              "updatedAt": "2025-02-27T15:18:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6d2yQD",
          "commit": {
            "abbreviatedOid": "6059e57"
          },
          "author": "thibmeu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T16:27:29Z",
          "updatedAt": "2025-02-27T16:27:29Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "You are right. My bad. For the token challenge it works.",
              "createdAt": "2025-02-27T16:27:29Z",
              "updatedAt": "2025-02-27T16:27:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDONyB6uM6NDipV",
      "title": "Remove extra response from presentation struct",
      "url": "https://github.com/chris-wood/draft-arc/pull/15",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix a typo where I had an extra response field in the presentation struct",
      "createdAt": "2025-03-02T06:56:23Z",
      "updatedAt": "2025-03-03T17:44:56Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "9779d28674e161a1cea3962be58bb6796ebbb50e",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/typofix",
      "headRefOid": "200ae5f53265189174d80a560cfc4fba88510784",
      "closedAt": "2025-03-03T17:44:55Z",
      "mergedAt": "2025-03-03T17:44:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bf1ab809e30959ab97c743eb402d28fed786c37b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6eH4yg",
          "commit": {
            "abbreviatedOid": "200ae5f"
          },
          "author": "clangreformers",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "I have verified the change with test vectors. This change also matches [5.4.1. ]Presentation Proof Creation and [5.4.2. ] Presentation Proof Verification.\r\n\r\n-- Yingxian Wang",
          "createdAt": "2025-03-03T00:19:26Z",
          "updatedAt": "2025-03-03T00:19:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONyB6uM6ePV5i",
          "commit": {
            "abbreviatedOid": "200ae5f"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T17:44:49Z",
          "updatedAt": "2025-03-03T17:44:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDONyB6uM6RDrh6",
      "title": "Clean up specs for clarity",
      "url": "https://github.com/chris-wood/draft-arc/pull/26",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses the following issues:\r\nhttps://github.com/chris-wood/draft-arc/issues/16\r\nhttps://github.com/chris-wood/draft-arc/issues/18\r\nhttps://github.com/chris-wood/draft-arc/issues/20\r\nhttps://github.com/chris-wood/draft-arc/issues/22",
      "createdAt": "2025-04-02T09:26:02Z",
      "updatedAt": "2025-04-15T16:05:36Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "08c54fd64f198e85d8a90827a45944cb52e5fec3",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/spec-cleanup",
      "headRefOid": "dd47f5f07c30cbd36f9fd679d5ea965ad85e48a6",
      "closedAt": "2025-04-15T16:05:36Z",
      "mergedAt": "2025-04-15T16:05:36Z",
      "mergedBy": "cathieyun",
      "mergeCommit": {
        "oid": "061e446a4eeed977735f06386f570f5ad1296d9d"
      },
      "comments": [
        {
          "author": "karulont",
          "authorAssociation": "NONE",
          "body": "> The server implementation won't parse out the tag, so it can't reasonably enforce double spending on that value...\r\n\r\nWhy not?\r\nImplementation in swift-crypto already exposes the tag:\r\nhttps://github.com/apple/swift-crypto/blob/main/Sources/_CryptoExtras/ARC/ARC%2BAPI.swift#L245\r\nStoring the whole presentation vs just the tag has performance implications.",
          "createdAt": "2025-04-03T15:43:52Z",
          "updatedAt": "2025-04-03T15:44:14Z"
        },
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed with Chris - for Privacy Pass interoperability, the *ideal* behavior which would fit cleanly into the current Privacy Pass workflow, would be if the server could store the entire ARC token for double spending checks (this maps most cleanly to how the server currently stores the entire RSA signature value for double spend checks). So, I understand the motivation/reasoning here.\r\n\r\nHowever for ARC, this isn't possible because the tag is the only item in the presentation which is \"weight bearing\" for rate limiting. That is, we can only use the tag for double-spend prevention. If we tried to use the whole presentation for double-spend prevention, it would not work because it is possible to make multiple presentations with the same tag, but where the other presentation elements are different (since they are re-randomized each time). So it would be trivial for a malicious client to exceed the rate limit by reusing the same nonce for multiple presentations.",
          "createdAt": "2025-04-12T04:26:56Z",
          "updatedAt": "2025-04-12T04:26:56Z"
        },
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Chris gave me the go-ahead to merge this PR.",
          "createdAt": "2025-04-15T16:05:32Z",
          "updatedAt": "2025-04-15T16:05:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6jIuoY",
          "commit": {
            "abbreviatedOid": "06f0496"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "Some nits on double spending. The server implementation won't parse out the tag, so it can't reasonably enforce double spending on that value. I think it's probably fine to simply say that the relevant presentation values (nonce and presentation) itself cannot be spent more than once. ",
          "createdAt": "2025-04-02T16:54:09Z",
          "updatedAt": "2025-04-02T16:59:57Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nImplementation-specific steps: to prevent double spending, the Origin should perform a check that the\r\n```",
              "createdAt": "2025-04-02T16:54:09Z",
              "updatedAt": "2025-04-02T16:59:57Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\npresentation (`presentation_nonce` and `presentation`) has not previously been seen for a given request and credential context. It then stores the presentation values for use in future double\r\n```",
              "createdAt": "2025-04-02T16:54:42Z",
              "updatedAt": "2025-04-02T16:59:57Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nspending checks. To reduce the overhead of performing double spend checks, the Origin can store and\r\n```",
              "createdAt": "2025-04-02T16:54:49Z",
              "updatedAt": "2025-04-02T16:59:57Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nlook up the presentation values corresponding to the associated request_context and presentation_context values.\r\n```",
              "createdAt": "2025-04-02T16:57:06Z",
              "updatedAt": "2025-04-02T16:59:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6koTR_",
          "commit": {
            "abbreviatedOid": "06f0496"
          },
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-12T04:13:02Z",
          "updatedAt": "2025-04-12T04:13:02Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "The server should just store the tag for double spending, as the tag is the \"weight bearing\" field for rate limiting purposes. The other presentation elements may be re-randomized (and therefore look different) even if the rate limit is exceeded (eg if a nonce is reused), so checking the whole presentation is not the right way to enforce rate limiting.",
              "createdAt": "2025-04-12T04:13:02Z",
              "updatedAt": "2025-04-12T04:13:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6koTS9",
          "commit": {
            "abbreviatedOid": "06f0496"
          },
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-12T04:13:17Z",
          "updatedAt": "2025-04-12T04:13:17Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Same as above.",
              "createdAt": "2025-04-12T04:13:17Z",
              "updatedAt": "2025-04-12T04:13:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDONyB6uM6RHDAk",
      "title": "Move ARC to use P256 by default",
      "url": "https://github.com/chris-wood/draft-arc/pull/27",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For performance, we can move from P384 to P256 as the default curve. \r\n- This will give us approximately an order of magnitude speedup.\r\n- This is acceptable from a security standpoint for most applications - P384 was originally chosen as a very conservative starting point, but with the understanding that it may be overly conservative at the cost of performance.\r\n",
      "createdAt": "2025-04-02T15:23:03Z",
      "updatedAt": "2025-04-14T22:56:08Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "08c54fd64f198e85d8a90827a45944cb52e5fec3",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/p256",
      "headRefOid": "21256c089aca2b62faf5cb5e2de724ae0fcaa8fc",
      "closedAt": "2025-04-14T22:56:04Z",
      "mergedAt": "2025-04-14T22:56:04Z",
      "mergedBy": "cathieyun",
      "mergeCommit": {
        "oid": "3793df49d3813daf3123dc305c222404426b6b81"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6jIhvo",
          "commit": {
            "abbreviatedOid": "21256c0"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-02T16:33:13Z",
          "updatedAt": "2025-04-02T16:33:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDONyB6uM6beW5g",
      "title": "Clarify unlinkability properties",
      "url": "https://github.com/chris-wood/draft-arc/pull/31",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/chris-wood/draft-arc/issues/10 by adding clarifying that the original analysis for for credential request, and adding a privacy analysis for credential response (issuance).",
      "createdAt": "2025-06-20T21:04:35Z",
      "updatedAt": "2025-08-06T20:43:28Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "061e446a4eeed977735f06386f570f5ad1296d9d",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "stat-anon",
      "headRefOid": "63da92a60f0c7f2ac3bd66021ac22bdb62ec3b2d",
      "closedAt": "2025-06-23T20:54:38Z",
      "mergedAt": "2025-06-23T20:54:38Z",
      "mergedBy": "cathieyun",
      "mergeCommit": {
        "oid": "be865e28cae741946a81ba5bd064f71f21767b4d"
      },
      "comments": [
        {
          "author": "cathieyun",
          "authorAssociation": "COLLABORATOR",
          "body": "Added some changes suggested by Michele.",
          "createdAt": "2025-06-23T20:52:07Z",
          "updatedAt": "2025-06-23T20:52:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6v6Cjp",
          "commit": {
            "abbreviatedOid": "e36f826"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "This LGTM with the suggested changes!",
          "createdAt": "2025-06-23T18:56:06Z",
          "updatedAt": "2025-06-23T18:56:19Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nHowever, an adversary breaking the discrete log (e.g., a quantum adversary) can find pairs `(x0, x0Blinding)` and `(x0', x0Blinding')` both committing to `X0` and use them to issue different credentials. This capability would let the adversary partitioning the client anonymity set by linking clients to the underlying secret used for credential issuance, i.e., `x0` or `x0'`. This requires an active attack and therefore is not an immediate concern.\r\n\r\nStatistical anonymity is possible by committing to `x0` and x0Blinding` separately, as in {{REVISITING_KVAC}}. However, the security of this construction requires additional analysis.\r\n```",
              "createdAt": "2025-06-23T18:56:06Z",
              "updatedAt": "2025-06-23T18:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONyB6uM6v6DI4",
          "commit": {
            "abbreviatedOid": "e36f826"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-23T18:57:11Z",
          "updatedAt": "2025-06-23T18:57:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I don't think we need to comment on performance for the alternative commitment scheme since security is the primary reason we would not use it. ",
              "createdAt": "2025-06-23T18:57:11Z",
              "updatedAt": "2025-06-23T18:57:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDONyB6uM6becYP",
      "title": "Remove P384 from the list of ARC supported curves",
      "url": "https://github.com/chris-wood/draft-arc/pull/32",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From discussion on the CFRG list and with authors, we decided to move to P256 instead of P384 for performance reasons. I kept P384 as a curve option originally, but it seems better to remove it for several reasons:\r\n- We want to move the proof to use the sigma proof spec, which only supports P256: https://github.com/mmaker/draft-zkproof-sigma-protocols/blob/main/draft-orru-zkproof-sigma-protocols.md#ciphersuites-ciphersuites\r\n- Implementors would prefer fewer rather than more curves. This will also help interoperability and adoption. Eg from the cfrg mailing list, on the call for adoption for sigma protocols, Chris Patton says:\r\n> As an implementer, in general I think fewer choices for curves is always better. In this case, I would rather have P384 only than a bunch of different options (including P256, ristretto, decaf, etc.). It just strikes me as odd to choose P384 over something smaller and more widely used, like P256. For TLS for example, both X25519 and P256 are much, much more common than P384.",
      "createdAt": "2025-06-20T21:19:37Z",
      "updatedAt": "2025-06-23T18:37:17Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "061e446a4eeed977735f06386f570f5ad1296d9d",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "update-curves",
      "headRefOid": "baeff348cff7147dae75cb568fac472542ede7c2",
      "closedAt": "2025-06-23T18:37:17Z",
      "mergedAt": "2025-06-23T18:37:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "01234b0dbcb18d7e2109898ed4e7acbb04502c2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONyB6uM6v50vj",
          "commit": {
            "abbreviatedOid": "baeff34"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-23T18:37:04Z",
          "updatedAt": "2025-06-23T18:37:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDONyB6uM6idmvY",
      "title": "Fix ARC section references, open issues",
      "url": "https://github.com/chris-wood/draft-arc/pull/33",
      "state": "MERGED",
      "author": "cathieyun",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Tried to push the a new tag to the privacy pass datatracker, but it failed because of \"no link definition\" errors:\r\nhttps://github.com/chris-wood/draft-arc/actions/runs/16788723485/job/47545705794\r\n\r\nFixing those errors here.",
      "createdAt": "2025-08-06T21:20:58Z",
      "updatedAt": "2025-08-06T21:30:30Z",
      "baseRepository": "chris-wood/draft-arc",
      "baseRefName": "main",
      "baseRefOid": "be865e28cae741946a81ba5bd064f71f21767b4d",
      "headRepository": "chris-wood/draft-arc",
      "headRefName": "cathie/pp-lint",
      "headRefOid": "93d986fc3bd3f9499b599f1ad14e16c6c3bac91f",
      "closedAt": "2025-08-06T21:30:30Z",
      "mergedAt": "2025-08-06T21:30:30Z",
      "mergedBy": "cathieyun",
      "mergeCommit": {
        "oid": "da1c77459c99717790b9068e4c5fbdd995076a82"
      },
      "comments": [],
      "reviews": []
    }
  ]
}